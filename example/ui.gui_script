local dirtylarry = require "dirtylarry/dirtylarry"
local log_helper = require("example.log")

local sys_name = sys.get_sys_info().system_name
local gameIDs = {
    ["Android"] = "1401815",
    ["iPhone OS"] = "1425385"
}

local BACK_KEY = hash("back")

local REWARDED = "rewardedVideo"
local INTERSTITIAL = "video"
local BANNER = "banner"

--log logic
local gprint = print
local log = {}
local text = ""
local LINES = 7
_G.print = function(...)
    gprint(...)
    local args = {...}
    local num = #log+1
    log[num] = "--"
    for k, v in pairs(args) do
        log[num] = log[num] .. tostring(v) .. " "
    end
    log[num] = log[num] .. "\n"
    text = ""
    if num > LINES then
        table.remove(log, 1)
    end
    for k, v in pairs(log) do
        text = text .. v
    end
end

function update()
    gui.set_text(gui.get_node("console"), text)
end
-- end log logic

local function print_placement_state(placement)
    if unityads then
        local state = unityads.get_placement_state(placement)
        if state == unityads.PLACEMENT_STATE_READY then
            print("PLACEMENT_STATE_READY ", placement)
        elseif state == unityads.PLACEMENT_STATE_NOT_AVAILABLE then
            print("PLACEMENT_STATE_NOT_AVAILABLE ", placement)
        elseif state == unityads.PLACEMENT_STATE_DISABLED then
            print("PLACEMENT_STATE_DISABLED ", placement)
        elseif state == unityads.PLACEMENT_STATE_WAITING then
            print("PLACEMENT_STATE_WAITING ", placement)
        elseif state == unityads.PLACEMENT_STATE_NO_FILL then
            print("PLACEMENT_STATE_NO_FILL ", placement)
        end
    end
end

local COLOR = {
    [true] = vmath.vector4(1, 1, 1, 1),
    [false] = vmath.vector4(1, 0, 0, 1)
}

local function update_ui(self)
    local is_initialized = unityads.is_initialized()
    gui.set_enabled(gui.get_node("use_load_box"), not is_initialized)
    gui.set_enabled(gui.get_node("idfa/larrybutton"), not is_initialized)
    gui.set_enabled(gui.get_node("type"), is_initialized)
    if self.ad_type then
        gui.set_enabled(gui.get_node("banner_group"), false)
        gui.set_color(gui.get_node("load_video/larrylabel"), COLOR[self.use_load and not unityads.is_ready(self.ad_type)])
        gui.set_color(gui.get_node("show_video/larrylabel"), COLOR[unityads.is_ready(self.ad_type)])
        if self.ad_type == REWARDED then
            gui.set_enabled(gui.get_node("load_video/larrybutton"), true)
            gui.set_enabled(gui.get_node("show_video/larrybutton"), true)
        elseif self.ad_type == INTERSTITIAL then
            gui.set_enabled(gui.get_node("load_video/larrybutton"), true)
            gui.set_enabled(gui.get_node("show_video/larrybutton"), true)
        elseif self.ad_type == BANNER then
            gui.set_enabled(gui.get_node("load_video/larrybutton"), false)
            gui.set_enabled(gui.get_node("show_video/larrybutton"), false)
            gui.set_enabled(gui.get_node("banner_group"), true)
            gui.set_color(gui.get_node("show_banner/larrylabel"), COLOR[self.is_loaded_banner == true])
        end
    else
        gui.set_enabled(gui.get_node("load_video/larrybutton"), false)
        gui.set_enabled(gui.get_node("show_video/larrybutton"), false)
        gui.set_enabled(gui.get_node("banner_group"), false)
    end
end

local function unity_ads_callback(self, message_id, message)
    print(log_helper.get_msg_log(message_id, message))
    -- message = {event = int, ...}
    if message_id == unityads.MSG_INIT then
        if message.event == unityads.EVENT_COMPLETED then
            -- message = {placement_id = "string", ...}
        elseif message.event == unityads.EVENT_SDK_ERROR then
            -- message = {code = int, error = "error message string"}
            if message.code == unityads.ERROR_INTERNAL then
                -- initialization failed due to environment or internal services
            elseif message.code == unityads.ERROR_INVALID_ARGUMENT then
                -- initialization failed due to invalid argument(e.g. game ID)
            elseif message.code == unityads.ERROR_AD_BLOCKER_DETECTED then
                -- initialization failed due to url being blocked
            end
        elseif message.event == unityads.EVENT_JSON_ERROR then
            -- message = {error = "error message string"}
        end
    elseif message_id == unityads.MSG_SHOW then
        if message.event == unityads.EVENT_COMPLETED then
            -- message = {placement_id = "string"}
            -- An event that indicates that the ad was played entirely.
        elseif message.event == unityads.EVENT_SKIPPED then
            -- message = {placement_id = "string"}
            -- An event that indicates that the user skipped the ad.
        elseif message.event == unityads.EVENT_START then
            -- message = {placement_id = "string"}
            -- UnityAds has started to show ad with a specific placement.
        elseif message.event == unityads.EVENT_CLICKED then
            -- message = {placement_id = "string"}
            -- UnityAds has received a click while showing ad with a specific placement.
        elseif message.event == unityads.EVENT_SDK_ERROR then
            -- message = {code = int, error = "error message string", placement_id = "string"}
            if message.code == unityads.ERROR_NOT_INITIALIZED then
                -- show failed due to SDK not initialized.
            elseif message.code == unityads.ERROR_NOT_READY then
                --show failed due to placement not being ready.
            elseif message.code == unityads.ERROR_VIDEO_PLAYER then
                -- show failed due to video player.
            elseif message.code == unityads.ERROR_INVALID_ARGUMENT then
                -- show failed due to invalid arguments.
            elseif message.code == unityads.ERROR_NO_CONNECTION then
                -- show failed due to internet connection.
            elseif message.code == unityads.ERROR_ALREADY_SHOWING then
                -- show failed due to ad is already being showen.
            elseif message.code == unityads.ERROR_INTERNAL then
                -- show failed due to environment or internal services.
            end
        elseif message.event == unityads.EVENT_JSON_ERROR then
            -- message = {error = "error message string"}
        end
    elseif message_id == unityads.MSG_LOAD then
        if message.event == unityads.EVENT_LOADED then
            -- message = {placement_id = "string"}
            -- Load request has successfully filled the specified placementId with an ad that is ready to show.
        elseif message.event == unityads.EVENT_SDK_ERROR then
            -- message = {code = int, error = "error message string", placement_id = "string"}
            if message.code == unityads.ERROR_NOT_INITIALIZED then
                -- Error related to SDK not initialized
            elseif message.code == unityads.ERROR_INTERNAL then
                -- Error related to environment or internal services
            elseif message.code == unityads.ERROR_INVALID_ARGUMENT then
                -- Error related to invalid arguments
            elseif message.code == unityads.ERROR_NO_FILL then
                -- Error related to there being no ads available
            elseif message.code == unityads.ERROR_TIMEOUT then
                -- Error related to there being no ads available
            end
        elseif message.event == unityads.EVENT_JSON_ERROR then
            -- message = {error = "error message string"}
        end
    elseif message_id == unityads.MSG_BANNER then
        if message.event == unityads.EVENT_LOADED then
            -- message = {placement_id = "string"}
            -- Banner is loaded and ready to be placed in the view hierarchy.
            self.is_loaded_banner = true
            gui.set_text(gui.get_node("banner/larrylabel"), "Unload Banner")
        elseif message.event == unityads.EVENT_LEFT_APPLICATION then
            -- message = {placement_id = "string"}
            -- Banner links outside the application.
        elseif message.event == unityads.EVENT_CLICKED then
            -- message = {placement_id = "string"}
            -- Banner is clicked.
        elseif message.event == unityads.EVENT_SDK_ERROR then
            -- message = {code = int, error = "error message string", "placement_id", placementId}
            if message.code == unityads.ERROR_UNKNOWN then
                -- Unknown error 
            elseif message.code == unityads.ERROR_NATIVE then
                -- Error related to native
            elseif message.code == unityads.ERROR_WEBVIEW then
                -- Error related to webview
            elseif message.code == unityads.ERROR_NO_FILL then
                -- Error related to there being no ads available
            end
        elseif message.event == unityads.EVENT_JSON_ERROR then
            -- message = {error = "error message string"}
        end
    elseif message_id == unityads.MSG_IDFA then
        if message.event == unityads.EVENT_NOT_SUPPORTED then
            -- IDFA isn't supported
        elseif message.event == unityads.EVENT_STATUS_AUTORIZED then
        elseif message.event == unityads.EVENT_STATUS_DENIED then
        elseif message.event == unityads.EVENT_STATUS_NOT_DETERMINED then
        elseif message.event == unityads.EVENT_STATUS_RESTRICTED then
        elseif message.event == unityads.EVENT_JSON_ERROR then
            -- message = {error = "error message string"}
        end
    end
    update_ui(self)
end

function init(self)
    if not unityads then
        return
    end
    self.use_load = true
    msg.post(".", "acquire_input_focus")
    update_ui(self)
    if unityads then
        unityads.set_debug_mode(true)
        print("VERSION: ", unityads.get_version(), "DEBUG:", unityads.get_debug_mode())
        print("isInitialized:", unityads.is_initialized(),"isSupported:", unityads.is_supported())
        print("isReady video:", unityads.is_ready(INTERSTITIAL), " banner:", unityads.is_ready(BANNER), " rewardedVideo", unityads.is_ready(REWARDED))
        print_placement_state(INTERSTITIAL)
        print_placement_state(BANNER)
        print_placement_state(REWARDED)
        unityads.set_callback(unity_ads_callback)
    end
end

function final(self)
    print("Final! Remove Callback!")
    if unityads then
        unityads.set_callback()
    end
end

local function init_unity_ads(self, appId)
    if unityads and appId then
        if not unityads.is_initialized() then
            print("Init SDK with id", appId)
            unityads.initialize(appId, unity_ads_callback, true, self.use_load)
        else
            print("UnityADS already inited. Just set callback one more time")
            unityads.set_callback(unity_ads_callback)
        end
    end
end

local function set_callback(self)
    if unityads then
        print("setCallback(unity_ads_callback)")
        unityads.set_callback(unity_ads_callback)
    end
end

local function remove_callback(self)
    if unityads then
        print("setCallback(nil)")
        unityads.set_callback(nil) -- same as unityads.set_callback()
    end
end

local function loadbanner(self)
    if unityads then
        if not self.is_loaded_banner then
            print("loadBanner('banner')")
            unityads.load_banner("banner")
        else
            self.is_loaded_banner = nil
            self.is_show_banner = false
            print("unloadBanner()")
            gui.set_text(gui.get_node("show_banner/larrylabel"), "Show Banner")
            gui.set_color(gui.get_node("show_banner/larrylabel"), vmath.vector4(1, 0, 0, 1))
            gui.set_text(gui.get_node("banner/larrylabel"), "Load Banner")
            unityads.unload_banner()
            update_ui(self)
        end
    end
end

local function showbanner(self)
    if unityads then
        if not self.is_show_banner then
            self.is_show_banner = true
            gui.set_text(gui.get_node("show_banner/larrylabel"), "Hide Banner")
            print("showBanner()")
            unityads.show_banner()
        else
            self.is_show_banner = false
            gui.set_text(gui.get_node("show_banner/larrylabel"), "Show Banner")
            print("hideBanner()")
            unityads.hide_banner()
        end
    end
end

local function change_banner_pos(self)
    if unityads then
        local banners = {
            "BANNER_POSITION_TOP_LEFT",
            "BANNER_POSITION_TOP_CENTER",
            "BANNER_POSITION_TOP_RIGHT",
            "BANNER_POSITION_BOTTOM_LEFT",
            "BANNER_POSITION_BOTTOM_CENTER",
            "BANNER_POSITION_BOTTOM_RIGHT",
            "BANNER_POSITION_CENTER"
        }
        if not self.banner_pos_num then
            self.banner_pos_num = 3
        else
            self.banner_pos_num = self.banner_pos_num + 1
            if self.banner_pos_num > #banners then
                self.banner_pos_num = 1
            end
        end
        unityads.set_banner_position(unityads[banners[self.banner_pos_num]])
        gui.set_text(gui.get_node("baner_pos"), banners[self.banner_pos_num])
    end
end

function on_input(self, action_id, action)

    if unityads.is_initialized() then
        local prev_type = self.ad_type
        
        self.ad_type = dirtylarry:radio("ad_type_interstitial", action_id, action, INTERSTITIAL, self.ad_type)
        self.ad_type = dirtylarry:radio("ad_type_rewarded", action_id, action, REWARDED, self.ad_type)
        self.ad_type = dirtylarry:radio("ad_type_banner", action_id, action, BANNER, self.ad_type)

        if prev_type ~= self.ad_type then
            update_ui(self)
        end
    else
        dirtylarry:button("idfa", action_id, action, function ()
            unityads.request_idfa()
        end)
    end


    self.use_load = dirtylarry:checkbox("use_load", action_id, action, self.use_load)
        
    dirtylarry:button("init", action_id, action, function ()
        init_unity_ads(self, gameIDs[sys_name])
    end)

    dirtylarry:button("set_callback", action_id, action, function ()
        set_callback(self)
    end)

    dirtylarry:button("remove_callback", action_id, action, function ()
        remove_callback(self)
    end)
    if self.ad_type == BANNER then
        dirtylarry:button("banner", action_id, action, function ()
            loadbanner(self)
        end)

        dirtylarry:button("show_banner", action_id, action, function ()
            showbanner(self)
        end)

        dirtylarry:button("banner_pos", action_id, action, function ()
            change_banner_pos(self)
        end)
    elseif self.ad_type then
        dirtylarry:button("load_video", action_id, action, function ()
            print("unityads.load("..self.ad_type..")")
            unityads.load(self.ad_type)
        end)

        dirtylarry:button("show_video", action_id, action, function ()
            print("unityads.show("..self.ad_type..")")
            unityads.show(self.ad_type)
        end)
        
    end

    if action_id == BACK_KEY and action.released then
        print("Time to exit!")
        msg.post("@system:", "exit", {code = 0})
    end

end
